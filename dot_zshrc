# Performance optimization: compile zshrc if it's newer than the compiled version
if [[ "$HOME/.zshrc" -nt "$HOME/.zshrc.zwc" || ! -f "$HOME/.zshrc.zwc" ]]; then
    zcompile "$HOME/.zshrc"
fi

# History Configuration
# ---------------------
HISTFILE=~/.zsh_history
HISTSIZE=100000
SAVEHIST=100000
setopt EXTENDED_HISTORY       # Save timestamp
setopt INC_APPEND_HISTORY     # Add commands as they are typed
setopt SHARE_HISTORY          # Share history between sessions
setopt HIST_EXPIRE_DUPS_FIRST # Remove duplicates first when trimming
setopt HIST_IGNORE_ALL_DUPS   # Remove older duplicate entries
setopt HIST_IGNORE_DUPS       # Ignore duplicates of previous event
setopt HIST_IGNORE_SPACE      # Ignore commands beginning with space
setopt HIST_SAVE_NO_DUPS      # Don't save duplicates
setopt HIST_FIND_NO_DUPS      # Don't display duplicates in search
setopt HIST_REDUCE_BLANKS     # Remove superfluous blanks

# Shell Options
# -------------
setopt autocd                 # Change directory without cd command
setopt extendedglob           # Extended pattern matching
setopt notify                 # Report status of background jobs immediately
setopt PROMPT_SUBST           # Allow parameter/command substitution in prompt
unsetopt beep                 # No beep on error

# Environment Variables & PATH Setup
# ----------------------------------
export EDITOR=nvim
export VISUAL=nvim
export TERMINAL=ghostty
export PNPM_HOME="$HOME/.local/share/pnpm"

# Ensure path array has unique entries
typeset -U path

# Add user bins to PATH (only if directories exist)
() {
  local user_bin_dirs=(
    "$PNPM_HOME"
    "$HOME/.dprint/bin"
  )

  for bin_dir in "${user_bin_dirs[@]}"; do
    [[ -d "$bin_dir" ]] && path=("$bin_dir" $path)
  done
}

# Keybindings
# -----------
bindkey -v                    # Vi mode
bindkey '^R' history-incremental-search-backward # Ctrl+R for history search
bindkey '^A' beginning-of-line                   # Ctrl+A to start of line
bindkey '^E' end-of-line                         # Ctrl+E to end of line
bindkey '^[[1;5C' forward-word                   # Ctrl+Right
bindkey '^[[1;5D' backward-word                  # Ctrl+Left

# Prompt Configuration
# --------------------
autoload -Uz vcs_info
precmd() {
  vcs_info
}
zstyle ':vcs_info:git:*' formats '%F{red}%b%f%F{green}%c%F{yellow}%u%f'
zstyle ':vcs_info:git:*' actionformats '%F{red}%b%f (%F{yellow}%a%f)%F{green}%c%F{yellow}%u%f'
PROMPT='%F{blue}%~%f ${vcs_info_msg_0_}$ '

# Aliases
# -------
alias vi='nvim'
alias vim='nvim'
alias cat='bat --paging=never'
alias ls='ls --color=auto'
alias ll='ls -alhF --color=auto'
alias la='ls -A --color=auto'
alias l='ls -CF --color=auto'
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# Functions
# ---------
reset-project() {
  echo "WARNING: Preparing to recursively delete node_modules, dist, .turbo in subdirectories."
  echo "Current directory: $(pwd)"
  read -q "REPLY?Proceed? (y/N) "
  echo

  [[ ! "$REPLY" =~ ^[Yy]$ ]] && { echo "Reset cancelled."; return 1; }

  echo "Searching for and deleting directories..."

  local dirs_to_remove=("node_modules" "dist" ".turbo")
  local removed=0

  for dir in "${dirs_to_remove[@]}"; do
    echo "Looking for ${dir} directories..."
    local found=$(find . -type d -name "$dir" -prune)
    if [[ -n "$found" ]]; then
      find . -type d -name "$dir" -prune -exec echo "Removing {}..." \; -exec rm -rf {} \;
      ((removed++))
    else
      echo "No $dir directories found."
    fi
  done

  echo "Reset finished. Removed $removed directory types."
}
alias reset='reset-project'

# Zinit Setup
# -----------
ZINIT_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/zinit/zinit.git"
if [[ ! -d $ZINIT_HOME ]]; then
    print -P "%F{33} %F{220}Installing Zinit...%f"
    command mkdir -p "$(dirname $ZINIT_HOME)"
    command git clone https://github.com/zdharma-continuum/zinit "$ZINIT_HOME" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} Installation failed.%f%b"
fi

source "$ZINIT_HOME/zinit.zsh"

# Zinit Plugins (Turbo mode for faster loading)
# ---------------------------------------------
zinit ice wait lucid
zinit light zsh-users/zsh-completions

zinit ice wait lucid
zinit light MichaelAquilina/zsh-you-should-use

zinit ice wait lucid
zinit light zsh-users/zsh-autosuggestions

zinit light zsh-users/zsh-syntax-highlighting

# Completion System Setup
# -----------------------
# Load completions system only once a day to improve startup time
autoload -Uz compinit
() {
  # Check if cache file exists and is not a day old
  if [[ -n "$XDG_CACHE_HOME" ]]; then
    ZCOMPDIR="$XDG_CACHE_HOME/zsh"
  else
    ZCOMPDIR="$HOME/.cache/zsh"
  fi
  mkdir -p "$ZCOMPDIR"
  ZCOMPFILE="$ZCOMPDIR/zcompdump-$ZSH_VERSION"

  # Only rebuild if older than 24h
  if [[ -f "$ZCOMPFILE" && $(find "$ZCOMPFILE" -mtime +1) ]]; then
    compinit -d "$ZCOMPFILE"
    # Optimize the completion dump file
    zcompile "$ZCOMPFILE"
  else
    # If file doesn't exist or is less than a day old
    compinit -C -d "$ZCOMPFILE"
  fi
}

# Completion styling
zstyle ':completion:*' menu select=2 scroll=0
zstyle ':completion:*:*:*:*:*' menu select=long
zstyle ':completion:*:descriptions' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format ' %F{yellow}%d%f'
zstyle ':completion:*:warnings' format ' %F{red}No matches for:%f %d'
zstyle ':completion:*:corrections' format ' %F{green}%d (errors: %e)%f'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' matcher-list '' \
    'm:{a-zA-Z}={A-Za-z}' \
    'r:|[._-]=* r:|=*' \
    'l:|=* r:|=*' \
    'e:?_=(#|-)*'

# PNPM Completion
if type compdef &>/dev/null; then
  _pnpm_completion() {
    local reply
    local si=$IFS

    IFS=$'\n' reply=($(COMP_CWORD="$((CURRENT-1))" COMP_LINE="$BUFFER" COMP_POINT="$CURSOR" SHELL=zsh pnpm completion-server -- "${words[@]}"))
    IFS=$si

    if [ "$reply" = "__tabtab_complete_files__" ]; then
      _files
    else
      _describe 'values' reply
    fi
  }
  compdef _pnpm_completion pnpm
fi
